/**
 * Service Layer Interface Contracts
 * 定义核心服务层的接口契约
 */

import { VideoInfo, Subtitle, DownloadTask, ProcessingTask, CompressionConfig } from '../data-model';

// ============= Downloader Service =============

export interface IDownloaderService {
  /**
   * Fetch video information from YouTube
   */
  fetchVideoInfo(url: string): Promise<VideoInfo>;

  /**
   * Start downloading a video
   */
  startDownload(
    url: string,
    options: DownloadOptions
  ): Promise<DownloadTask>;

  /**
   * Pause an active download
   */
  pauseDownload(taskId: string): Promise<void>;

  /**
   * Resume a paused download
   */
  resumeDownload(taskId: string): Promise<void>;

  /**
   * Cancel a download
   */
  cancelDownload(taskId: string): Promise<void>;

  /**
   * Get download progress
   */
  getProgress(taskId: string): DownloadProgress;

  /**
   * List all download tasks
   */
  listTasks(): DownloadTask[];
}

export interface DownloadOptions {
  quality: string;
  outputPath: string;
  filename?: string;
  subtitleLanguages?: string[];
  preferredFormat?: string;
}

export interface DownloadProgress {
  taskId: string;
  progress: number;
  downloadedBytes: number;
  totalBytes: number;
  speed: number;
  eta: number;
  status: 'downloading' | 'paused' | 'completed' | 'failed';
}

// ============= Subtitle Service =============

export interface ISubtitleService {
  /**
   * List available subtitles for a video
   */
  listAvailableSubtitles(videoUrl: string): Promise<SubtitleInfo[]>;

  /**
   * Download subtitle from YouTube
   */
  downloadSubtitle(
    videoUrl: string,
    language: string
  ): Promise<Subtitle>;

  /**
   * Generate subtitle using Whisper
   */
  generateSubtitle(
    videoPath: string,
    options: SubtitleGenerationOptions
  ): Promise<Subtitle>;

  /**
   * Embed subtitles into video
   */
  embedSubtitles(
    videoPath: string,
    subtitles: EmbedSubtitleOptions
  ): Promise<ProcessingTask>;

  /**
   * Convert subtitle format
   */
  convertFormat(
    subtitle: Subtitle,
    targetFormat: 'srt' | 'vtt' | 'ass'
  ): Promise<Subtitle>;
}

export interface SubtitleInfo {
  language: string;
  languageName: string;
  isAutoGenerated: boolean;
  formats: string[];
}

export interface SubtitleGenerationOptions {
  language?: string;
  model?: 'tiny' | 'base' | 'small' | 'medium' | 'large';
  translate?: boolean;
  detectLanguage?: boolean;
}

export interface EmbedSubtitleOptions {
  primarySubtitle: Subtitle;
  secondarySubtitle?: Subtitle;
  layout: 'stacked' | 'side_by_side';
  styling?: SubtitleStyling;
  outputPath: string;
}

export interface SubtitleStyling {
  primaryFontSize?: number;
  secondaryFontSize?: number;
  primaryColor?: string;
  secondaryColor?: string;
  fontFamily?: string;
  outline?: boolean;
  shadow?: boolean;
}

// ============= Converter Service =============

export interface IConverterService {
  /**
   * Compress video with specified settings
   */
  compressVideo(
    inputPath: string,
    config: CompressionConfig
  ): Promise<ProcessingTask>;

  /**
   * Convert video format
   */
  convertFormat(
    inputPath: string,
    targetFormat: string
  ): Promise<ProcessingTask>;

  /**
   * Extract audio from video
   */
  extractAudio(
    videoPath: string,
    outputFormat: 'mp3' | 'aac' | 'wav'
  ): Promise<ProcessingTask>;

  /**
   * Get video metadata
   */
  getVideoMetadata(videoPath: string): Promise<VideoMetadata>;

  /**
   * Estimate output file size
   */
  estimateFileSize(
    inputPath: string,
    config: CompressionConfig
  ): Promise<number>;

  /**
   * Cancel processing task
   */
  cancelProcessing(taskId: string): Promise<void>;
}

export interface VideoMetadata {
  duration: number;
  width: number;
  height: number;
  fps: number;
  bitrate: number;
  codec: string;
  audioCodec: string;
  fileSize: number;
}

// ============= Storage Service =============

export interface IStorageService {
  /**
   * Save download task
   */
  saveDownloadTask(task: DownloadTask): Promise<void>;

  /**
   * Get download task by ID
   */
  getDownloadTask(taskId: string): Promise<DownloadTask | null>;

  /**
   * List download history
   */
  getDownloadHistory(
    limit?: number,
    offset?: number
  ): Promise<DownloadTask[]>;

  /**
   * Save video info to cache
   */
  cacheVideoInfo(videoInfo: VideoInfo): Promise<void>;

  /**
   * Get cached video info
   */
  getCachedVideoInfo(videoId: string): Promise<VideoInfo | null>;

  /**
   * Save user preferences
   */
  savePreferences(preferences: any): Promise<void>;

  /**
   * Get user preferences
   */
  getPreferences(): Promise<any>;

  /**
   * Clear cache
   */
  clearCache(): Promise<void>;

  /**
   * Get storage statistics
   */
  getStorageStats(): Promise<StorageStats>;
}

export interface StorageStats {
  totalVideos: number;
  totalDownloads: number;
  cacheSize: number;
  oldestEntry: Date;
  newestEntry: Date;
}

// ============= Update Service =============

export interface IUpdateService {
  /**
   * Check for application updates
   */
  checkForUpdates(): Promise<UpdateInfo | null>;

  /**
   * Download update
   */
  downloadUpdate(): Promise<void>;

  /**
   * Install update and restart
   */
  installUpdate(): Promise<void>;

  /**
   * Get current version
   */
  getCurrentVersion(): string;
}

export interface UpdateInfo {
  version: string;
  releaseDate: Date;
  releaseNotes: string;
  downloadSize: number;
  isMandatory: boolean;
}

// ============= Contract Tests =============

/**
 * Service contract tests - define expected behavior
 */
export const SERVICE_CONTRACT_TESTS = {
  DownloaderService: {
    fetchVideoInfo: {
      input: 'https://www.youtube.com/watch?v=dQw4w9WgXcQ',
      expectedOutput: {
        id: expect.any(String),
        url: expect.any(String),
        title: expect.any(String),
        duration: expect.any(Number),
        availableFormats: expect.any(Array)
      }
    },
    startDownload: {
      input: {
        url: 'https://www.youtube.com/watch?v=dQw4w9WgXcQ',
        options: {
          quality: '720p',
          outputPath: '/downloads/'
        }
      },
      expectedOutput: {
        id: expect.any(String),
        status: 'downloading',
        progress: 0
      }
    }
  },

  SubtitleService: {
    generateSubtitle: {
      input: {
        videoPath: '/path/to/video.mp4',
        options: {
          language: 'en',
          model: 'base'
        }
      },
      expectedOutput: {
        id: expect.any(String),
        language: 'en',
        format: 'srt',
        content: expect.any(String)
      }
    }
  },

  ConverterService: {
    compressVideo: {
      input: {
        inputPath: '/path/to/input.mp4',
        config: {
          outputFormat: 'mp4',
          resolution: '720p',
          videoBitrate: 2000,
          preset: 'medium'
        }
      },
      expectedOutput: {
        id: expect.any(String),
        type: 'VIDEO_COMPRESSION',
        status: 'processing',
        progress: 0
      }
    }
  },

  StorageService: {
    saveDownloadTask: {
      input: {
        id: 'task-123',
        videoInfo: {},
        status: 'downloading',
        progress: 50
      },
      expectedBehavior: 'Task saved to database'
    },
    getPreferences: {
      expectedOutput: {
        defaultOutputPath: expect.any(String),
        defaultQuality: expect.any(String),
        theme: expect.stringMatching(/light|dark|system/)
      }
    }
  }
};